# Product Requirements Document (PRD)
# Memory/Context Server Implementation (MCP Pattern)

## 1. Project Overview

### Vision
Build a memory/context server following Model Context Protocol (MCP) specifications to provide persistent, structured memory for AI applications. This server acts as the "memory" infrastructure, significantly enhancing AI assistant capabilities through persistent context.

### Primary Value Proposition
**Enhanced GitHub Copilot Premium (GHCP) in VS Code:**
- Persistent project context across development sessions
- Task history and code relationship awareness for better suggestions
- Project-specific context enriching Copilot conversations
- Cross-session memory enabling continuity in AI-assisted development

### Project Scope
Implement an MCP-compliant server for storing, retrieving, and managing context objects (tasks, code, chat, etc.) in standardized format. Provides **infrastructure for context storage** that AI applications can consume via MCP protocol.

## 2. Core Purpose

### Primary Function
Acts as a backend service for storing, retrieving, and managing context objects in a standardized, extensible format.

### Key Characteristics
- **Agnostic**: Independent of how tasks are created, decomposed, or managed
- **Persistent**: Provides long-term storage for developer context
- **Structured**: Uses standardized formats for extensibility
- **Integration-focused**: Serves as integration point for clients (VS Code, CLI, agents)

### Analogy
Like a database or knowledge base for developer context - stores and serves data, doesn't create or manage it.

## 3. Technical Requirements

### 3.1 Data Model (Primary Focus: Tasks)
**Task as Primary Context Object** - aligns with developer workflows and tools like TaskMaster AI

```go
type Task struct {
    ID          string            `json:"id"`
    Title       string            `json:"title"`
    Description string            `json:"description"`
    Owner       string            `json:"owner"`
    Scope       string            `json:"scope"` // "local" or "shared"
    Permissions []string          `json:"permissions"`
    Timestamp   int64             `json:"timestamp"`
    Metadata    map[string]string `json:"metadata"`
    ParentID    string            `json:"parent_id,omitempty"`
    Subtasks    []Task            `json:"subtasks,omitempty"`
    CodeRefs    []string          `json:"code_refs,omitempty"`
}
```

### 3.2 Scope Implementation Priority

#### Local Context (MVP Priority)
- Store tasks and context locally for individual developer use
- Fast, private, offline access
- SQLite backend for simplicity
- Focus on GHCP integration and local workflows

#### Shared Project Context (Future Enhancement)
- Team/organization accessible MCP server
- Collaborative planning and execution
- PostgreSQL/Redis backend
- Authentication and access control

### 3.3 MCP Protocol Compliance
- **Versioning**: Semantic versioning for protocol and schemas
- **Context Object Format**: JSON with required fields (id, type, version, timestamp, data)
- **API Endpoints**: RESTful CRUD operations with filtering
- **Communication**: HTTP(S) with stateless/stateful support
- **Compatibility**: Graceful handling of schema changes

## 4. API Specification

### 4.1 Core Endpoints
```
GET /tasks - List all tasks (with optional filters)
GET /tasks/{id} - Retrieve a single task by ID
POST /tasks - Create a new task
PUT /tasks/{id} - Update an existing task
DELETE /tasks/{id} - Delete a task
POST /tasks/batch - Batch create/update/delete tasks
GET /tasks?type={type}&owner={owner}&scope={scope} - Filter tasks
GET /tasks/session/{session_id} - Retrieve tasks for specific session
```

### 4.2 Context Object API
```
GET /context - List context objects
GET /context/{id} - Retrieve specific context object
POST /context - Create new context object
PUT /context/{id} - Update context object
DELETE /context/{id} - Delete context object
```

### 4.3 Special Features
- **PRD Generation**: Generate Product Requirements Document from task set
- **Session Management**: Associate context with sessions/users/projects
- **Version Negotiation**: Handle schema compatibility

## 5. Technology Stack

### Backend
- **Language**: Go (performance, concurrency, API development)
- **Database**: SQLite (local MVP), PostgreSQL (shared future)
- **API**: RESTful with potential gRPC support
- **Concurrency**: Goroutines and channels for multi-threaded access

### Integration Points

#### 5.1 MCP Protocol Compliance
**Transport Layer Implementation**
- JSON-RPC 2.0 communication protocol
- Stdio transport for local process communication
- HTTP transport support for remote server communication
- Lifecycle management and core primitives handling

**MCP Server Primitives**
- **Resources**: Contextual data sources (task context, code references, project state)
- **Tools**: Executable functions for context CRUD operations
- **Prompts**: Interaction templates for context retrieval and management

**Protocol Specifications**
- Model-independent context exchange
- Dynamic resource discovery and updates
- Real-time notifications for context changes
- Standardized JSON-RPC method signatures

#### 5.2 MCP Client Integration
**Host Application Support**
- Claude Code CLI integration via MCP protocol
- AI application context provision through standardized interface
- Compatible with MCP-enabled development environments

**Context Resource Provision**
- Task and project context as MCP resources
- Code reference linking through MCP resource URIs
- Session-scoped context availability
- Real-time context updates via MCP notifications

**SDK Compatibility**
- TypeScript/JavaScript SDK support for web clients
- Python SDK for automation and scripting
- Go implementation following MCP specification patterns
- Cross-language client library compatibility

## 6. Implementation Phases

### Phase 1: Local MVP
- [ ] Basic MCP memory server functionality
- [ ] Local task CRUD operations with SQLite
- [ ] RESTful API implementation
- [ ] Basic authentication (OS-level/local user)
- [ ] Session management
- [ ] Go concurrency implementation

### Phase 2: Enhanced Local Features
- [ ] Batch operations and filtering
- [ ] Context object versioning
- [ ] PRD generation from task metadata
- [ ] CLI interface for local operations
- [ ] VS Code extension integration

### Phase 3: Shared Context Preparation
- [ ] OAuth 2.0 integration
- [ ] Role-based access control (RBAC)
- [ ] API key support
- [ ] Audit logging
- [ ] PostgreSQL/Redis backend options

### Phase 4: External Tool Integration
- [ ] TaskMaster AI client library
- [ ] GitHub integration for task sync
- [ ] Multiple client SDK support
- [ ] Performance optimization

## 7. Success Criteria

### Technical Requirements
- API response time < 100ms for local operations
- Support 1000+ context objects per project
- MCP protocol compliance
- Cross-platform compatibility
- Concurrent access support

### Integration Requirements
- **GHCP in VS Code**: Direct MCP server integration via `.vscode/mcp.json`
- **MCP Protocol Compliance**: Full adherence to modelcontextprotocol.io specifications
- **Real-time Context**: Dynamic resource updates and notifications
- **Cross-session Persistence**: Maintain context across development sessions

## 8. Key Differentiators

### What This IS
- **Memory Infrastructure**: Persistent storage for context objects
- **MCP Compliant**: Follows established protocol patterns
- **Integration Backend**: Serves multiple client types
- **Local-First**: Optimized for individual developer workflows

### What This IS NOT
- **Task Manager**: Doesn't create or manage task logic
- **AI Agent**: Doesn't decompose or prioritize tasks
- **Planning Tool**: Doesn't provide strategic planning capabilities
- **UI Application**: Backend service only

## 9. GHCP Integration Value

### Primary Use Case: Enhanced VS Code Development
1. **Setup**: Configure MCP server in `.vscode/mcp.json`
2. **Context Storage**: Persistent task and project context across sessions
3. **Copilot Enhancement**: AI assistant accesses stored context for better suggestions
4. **Continuity**: Development context maintained between VS Code sessions

### Specific GHCP Benefits
- **Project Awareness**: Copilot understands long-term project goals and decisions
- **Task Context**: Code suggestions aligned with current task requirements
- **Historical Knowledge**: Previous implementation patterns inform new suggestions
- **Cross-File Understanding**: Maintained context of code relationships and dependencies

### MCP Protocol Advantages
- **Standardized Integration**: No custom GHCP integration work required
- **Tool Discovery**: Copilot automatically discovers available context resources
- **Real-time Updates**: Dynamic context changes reflected in AI responses
- **Extensible Design**: Easy addition of new context types and capabilities

## 10. Next Steps

### Immediate Actions
1. Set up Go development environment
2. Implement basic Task struct and CRUD operations
3. Create SQLite storage layer
4. Build RESTful API endpoints
5. Add basic session management

### Success Metrics
- Functional local MCP server
- TaskMaster AI integration capability
- Developer workflow enhancement
- Foundation for future shared context

---

**Document Version**: 1.0
**Last Updated**: 2025-08-19
**Owner**: Griffin
**Primary Focus**: Memory/Context Server Implementation
**Complementary Tool**: TaskMaster AI (separate)